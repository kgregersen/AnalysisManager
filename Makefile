# Directories
OBJ=obj
SRC=src
INC=inc
BIN=bin

# Set ROOT variables
ROOTC = $(shell root-config --cflags)
ROOTLIB := $(shell root-config --libs)
ROOTCINT = $(ROOTSYS)/bin/rootcint

# Set compiler flags
GCC = g++ -Wall -Wformat=0 -std=c++11
COPT = $(ROOTC) -I$(INC)

# Set linker flags
# Ubuntu's new default linker setting (--as-needed) exposes that many 
# libraries are linked incorrectly in ROOT. To fix this, we use the flag
# --no-as-needed for Ubuntu. Currently, this is not an issue for other 
# Linux distributions.
LD = g++
UNAME_OS := $(shell lsb_release -si)
ifeq ($(UNAME_OS),Ubuntu)
	LDFLAGS	= "-Wl,--no-as-needed" $(ROOTLIB) -L$(OBJ) # Ubuntu
else 
	LDFLAGS	= $(ROOTLIB) -L$(OBJ) # Other OS
endif


# List of sources and objects for main program
CXXSRC=$(shell find $(SRC) -name "*.cxx" ! -name "Dict.cxx")
CXXOBJ=$(CXXSRC:$(SRC)/%.cxx=$(OBJ)/%.o)
CPPSRC=$(shell find $(SRC) -name "*.cpp")
CPPOBJ=$(CPPSRC:$(SRC)/%.cpp=$(OBJ)/%.o)
CPPEXE=$(CPPSRC:$(SRC)/%.cpp=$(BIN)/%)
DICT=$(OBJ)/Dict.o

# Set default target
all: $(INC)/AllSelectors.h $(CPPEXE)


# Dictionary
$(DICT): $(SRC)/Dict.cxx
	@echo " "
	@echo "------>>>>>> Compiling $<"
	$(GCC) $(COPT) -c $< -o $@
	@echo " "
	@echo "------>>>>>> Moving $(SRC)/Dictrdict.pcm to $(BIN)/"
	@mv $(SRC)/Dict_rdict.pcm $(BIN)/.
$(SRC)/Dict.cxx: $(INC)/LinkDef.h
	@echo " "
	@echo "------>>>>>> Generating $@"
	$(ROOTCINT) -f $@ -c $<

# Generic rule for CXXOBJ
$(OBJ)/%.o: $(SRC)/%.cxx $(INC)/%.h 
	@echo " "
	@echo "------>>>>>> Compiling $<"
	$(GCC) $(COPT) -c $< -o $@

# Generic rule for CPPOBJ
$(OBJ)/%.o: $(SRC)/%.cpp
	@echo " "
	@echo "------>>>>>> Compiling $<"
	$(GCC) $(COPT) -c $< -o $@

# Link executables
$(BIN)/%: $(DICT) $(CXXOBJ) $(OBJ)/%.o
	@echo " "
	@echo "------>>>>>> Linking $<"
	$(LD) $(LDFLAGS) $^ -o $@

# Clean
clean:
	@echo " "
	@echo "------>>>>>> Removing object files and executable"
	rm -rf $(BIN)/* $(OBJ)/*.o $(SRC)/Dict.cxx $(SRC)/Dict_rdict.pcm

# Auto-generate selector list (AllSelectors.h)
SELECTORS = $(shell grep -l "public SelectorBase" $(INC)/*.h | sed 's,.*/,,' )
$(INC)/AllSelectors.h: $(addprefix $(INC)/,$(SELECTORS))
	@echo "Generating Selector list... \c"
	@echo " Selectors : $(SELECTORS) \c"
	@echo "// Autogenerated include file for Selector instantiation handling..." > $(INC)/AllSelectors.h
	@echo "#include <string>" >> $(INC)/AllSelectors.h
	@for i in $(SELECTORS); do \
	  echo "#include \"$$i\"" >> $(INC)/AllSelectors.h; \
	 done
	@echo "#define CREATE_SELECTOR(name,config,service,pointer) \\" >> $(INC)/AllSelectors.h
	@echo "pointer = 0; \\" >> $(INC)/AllSelectors.h
	@for i in $(SELECTORS:.h=); do \
	  echo "if (!std::string(name).compare(\"$$i\")) pointer = new $$i(name,config,service); \\" >> $(INC)/AllSelectors.h; \
	done
	@echo "// EOL" >> $(INC)/AllSelectors.h
	@echo "Done."

